import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean dp[][]= new boolean [n][k+1];

        for(int i=0 ; i<n ; i++){
            
            dp[i][0]= true;}
        
        if(arr[0]<= k){
        dp[0][arr[0]]= true;}
        
        for(int i =1 ; i < n ; i++){
            for(int target=0 ; target<=k ;target++){
                boolean notTaken = dp[i-1][target];
                boolean taken= false;
                if(target >= arr[i]){
                    taken = dp[i-1][target -arr[i]];
                }
                dp[i][target]= taken|| notTaken;
            }
        }
        return dp[n-1][k];


        
    }
    
}



import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int dp[][ ]= new int [n][k+1];
        for(int row[]:dp){
            Arrays.fill(row, -1);

        }
        return f(n-1 , k , arr, dp); 
    }
    public static boolean f(int idx , int k , int arr[] , int dp[][]){
        if(k==0)return true;
        if(idx==0 ){
            //if(k==arr[idx])
            return arr[0]==k;
        }
        if(dp[idx][k]!=-1)return dp[idx][k]==0?false:true;
        boolean notTake = f(idx-1, k , arr , dp);
        boolean take = false;
        if(k> arr[idx]){
            take = f(idx-1, k- arr[idx], arr , dp);

            
        }
        dp[idx][k]= take||notTake?1:0 ;
        return take||notTake;
    }
    
}


